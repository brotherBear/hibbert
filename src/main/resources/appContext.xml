<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">


	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:annotation-config />

	<bean id="interceptor" class="test.repository.PersistenceInterceptor" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- We will apply transaction at every method at all services. This is 
		achieved through a proxy. -->
	<bean id="matchAllWithPropReq"
		class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">
		<property name="transactionAttribute" value="PROPAGATION_REQUIRED, -BaseException" />
	</bean>

	<bean id="matchAllTxInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributeSource" ref="matchAllWithPropReq" />
	</bean>

	<!-- Define repositories -->
	<bean id="employeeRepository" class="test.repository.GenericRepositoryHibernateImpl">
		<constructor-arg>
			<value>test.domain.Employee</value>
		</constructor-arg>
	</bean>

	<bean id="projectRepository" class="test.repository.GenericRepositoryHibernateImpl">
		<constructor-arg>
			<value>test.domain.Project</value>
		</constructor-arg>
	</bean>
	
	<bean id="addressRepository" class="test.repository.GenericRepositoryHibernateImpl">
		<constructor-arg>
			<value>test.domain.Address</value>
		</constructor-arg>
	</bean>

	<bean id="countryRepository" class="test.repository.GenericRepositoryHibernateImpl">
		<constructor-arg>
			<value>test.domain.Country</value>
		</constructor-arg>
	</bean>


	<!-- Define services -->
	<bean id="projectService" class="test.service.ProjectServiceImpl" />
	<bean id="employeeManagementService" class="test.service.EmployeeManagementServiceImpl" />

	<!-- Supporting utilities -->
	<!-- 	 <bean id="hibernateUtil" class="test.util.HibernateUtil"/> --> 


	<!-- HSQLDB datasource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="sa" />
		<property name="password" value="" />
		<property name="jdbcUrl" value="jdbc:hsqldb:mem:testdb" />
		<property name="driverClass" value="org.hsqldb.jdbcDriver" />
	</bean>
	<!-- Alternative datasource not using connection pooling. 
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:testdb" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>
	-->

	<bean id="entityManagerFactory" depends-on="schemaGenerator"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- <property name="persistenceUnitName" value="JpaPersistenceUnit" /> -->

		<property value="META-INF/persistence.xml" name="persistenceXmlLocation" />
		<property name="dataSource" ref="dataSource" />

		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="false" />
				<property name="generateDdl" value="true" />
				<property name="database" value="HSQL" />
			</bean>
		</property>

		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
				<prop key="hibernate.default_schema">hibbert</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
			</props>
		</property>
	</bean>

	<bean id="schemaGenerator" class="test.util.SchemaGenerator" />

</beans>
